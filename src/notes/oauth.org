#+TITLE: OAuth

*This article should be useful if you are implementing OAuth in your own project or library.*

When you start creating a multi-user application, one of the key components, apart from the core functionality of your application, is an authorization framework.

It is not necessary to manage identities inside your application. Single-SignOn (SSO) is so common now. I will use the standard terminology in this article so that you are not lost if you ever want to refer to the original RFCs that define the protocols. Your application is a /resource server/. Users will interact with this resource server to get the desired functionality. I leave this upto you what that desired functionality could be.

OAuth is designed to 
OAuth defines four roles:

1. Resource owner
2. Resource server
3. Client
4. Authorization server

The interaction between the authorization server and the resource server is not defined by the OAuth 2.0 specification. They may choose any protocol which could be completely private. Or a single server may act as resource server as well as authorization server.

A single authorization server may be used for multiple resources servers. You might have see this already. Popularly known as Single Sign On (SSO), this could be an implementation of OAuth at work. Other kinds of SSOs are also possible. For example, using Security Assertion Markup Language (SAML).

* TODO Diagram

